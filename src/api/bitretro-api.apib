FORMAT: 1A

# Bit-Retro API

This document describes the Bit-Retro API, which is a `fake API` for Bit-Retro project.

This uses `Provider.request()` method to make a request to the backend.

## Syntax
```js
Provider.request(uri, init)
```

#### Parameters
- `uri` - The URI to make a request to. This includes endpoint and query parameters.
- `init` - An object containing any custom settings that you want to apply to the request such as headers, body, etc.

#### Return value
A Promise that resolves to a Response object.

## Provided Endpoints

Read more about data format in `src/backend/app/schema.js`
::: warning
No need to use **method** in the init object. The method is determined by the endpoint.
:::

#### [/api/account](#apiaccount)


`GET /availability` ➡ Check if is it possible to register a new user with the given unique key.
- parameters: unique key to check and its value
- response data: { available: boolean, criteria: Object }
```js
const response = await Provider.request('/api/account/availability?username=Famenu')
const data = response.ok ? await response.json() : null
```

`POST /register` ➡ Register a new user using data in the request body.
- body: { username: string, password: string }
- response data: { id: string, username: string, projects: Array }
```js
const response = await Provider.request('/api/account/register', {
  body: JSON.stringify({ username: 'Famenu', password: '123456' })
})
const data = response.ok ? await response.json() : null
```

`GET /login` ➡ Login a user using data in the request body.
- body: { username: string, password: string }
- response data: { sessionId: string, id: string, username: string, projects: Array }
```js
const response = await Provider.request('/api/account/login', {
  body: JSON.stringify({ username: 'Famenu', password: '123456' })
})
const data = response.ok ? await response.json() : null
```

`GET /session` ➡ Get the current session data (account).
- body: { sessionId: string }
- response data: { sessionId: string, id: string, username: string, projects: Array }
```js
const response = await Provider.request('/api/account/session', {
  body: JSON.stringify({ sessionId: '123456' })
})
const data = response.ok ? await response.json() : null
```
