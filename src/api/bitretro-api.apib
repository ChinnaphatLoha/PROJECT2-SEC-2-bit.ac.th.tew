FORMAT: 1A

# Bit-Retro API

This document describes the Bit-Retro API, which is a `fake API` for Bit-Retro project.

This uses `Provider.request()` method to make a request to the backend.

## Syntax
```js
Provider.request(uri, init)
```

#### Parameters
- `uri` - The URI to make a request to. This includes endpoint and query parameters.
- `init` - An object containing any custom settings that you want to apply to the request such as headers, body, etc.

#### Return value
A Promise that resolves to a Response object.

## Provided Endpoints

Read more about data format in `src/backend/app/schema.js`
::: warning
No need to use **method** in the init object. The method is determined by the endpoint.
:::

---

#### [/api/account](#apiaccount)


`GET /availability` ➡ Check if is it possible to register a new user with the given unique key.
- parameters: unique key to check and its value
- response data: { available: boolean, criteria: Object }
```js
const response = await Provider.request('/api/account/availability?username=Famenu')
const data = response.ok ? await response.json() : null
```

`POST /register` ➡ Register a new user using data in the request body.
- body: { username: string, password: string }
- response data: { id: string, username: string, projects: Array }
```js
const response = await Provider.request('/api/account/register', {
  body: JSON.stringify({ username: 'Famenu', password: '123456' })
})
const data = response.ok ? await response.json() : null
```

`GET /login` ➡ Login a user using data in the request body.
- body: { username: string, password: string }
- response data: { id: string, username: string, projects: Array }
```js
const response = await Provider.request('/api/account/login', {
  body: JSON.stringify({ username: 'Famenu', password: '123456' })
})
const data = response.ok ? await response.json() : null
```

`GET default` ➡ Get the user data using the cookie.
- headers: { Cookie: string } (cookie's name is `bit_tkn`)
- response data: { id: string, username: string, projects: Array }
```js
const response = await Provider.request('/api/account', {
  headers: {
    'Cookie': 'encrypted-token'
  }
})
const data = response.ok ? await response.json() : null
```

---

#### [/api/project-composition](#apiproject-composition)

`POST /projects` ➡ Create a new project using data in the request body.
- headers: { Cookie: string } (cookie's name is `bit_tkn`)
- body: { name: string, description?: string, retrospective_type: string, passkey: string }
- response data: { id: string, name: string, description: string, retrospective_type: string, authority: string }
```js
const response = await Provider.request('/api/project-composition/projects', {
  method: 'POST',
  headers: {
    'Cookie': getCookie(cookieName)
  },
  body: JSON.stringify({
    name: 'Bit-Retro',
    description: 'A project for Bit-Retro API',
    retrospective_type: 'start-stop-continue,
    passkey: '123456'
  })
})
const data = response.ok ? await response.json() : null
```

`PATCH /projects` ➡ Update the project using data in the request body.
- parameters: project id of the project as `pid`
- body: { name?: string, description?: string }
- response data: { id: string, name: string, description: string, retrospective_type: string, authority: string }
```js
const response = await Provider.request('/api/project-composition/projects?pid=ab2e', {
  method: 'PATCH',
  body: JSON.stringify({
    name: 'Bit-Retro',
    description: 'A project for Bit-Retro API'
  })
})
const data = response.ok ? await response.json() : null
```

`DELETE /projects` ➡ Delete the project using project ID.
- parameters: project id of the project as `pid`
- response data: { id: string, name: string, description: string, retrospective_type: string, authority: string }
```js
const response = await Provider.request('/api/project-composition/projects?pid=ab2e', {
  method: 'DELETE'
})
const data = response.ok ? await response.json() : null
```

`POST /projects/join` ➡ Join the project using project ID and passkey.
- headers: { Cookie: string } (cookie's name is `bit_tkn`)
- body: { pid: string, passkey: string }
- response data: { id: string, name: string, description: string, retrospective_type: string, authority: string }
```js
const response = await Provider.request('/api/project-composition/projects/join', {
  method: 'POST',
  headers: {
    'Cookie': getCookie(cookieName)
  },
  body: JSON.stringify({
    pid: 'ab2e',
    passkey: '123456'
  })
})
const data = response.ok ? await response.json() : null
```

`GET /meetings` ➡ Get all meetings of the specified project.
- parameters: project id of the meetings as `pid`
- response data: { id: string, start_date: string, end_date: string, description: string, feedbackRecords: { [title]: { content: string, username: string }[], ... } }
```js
const response = await Provider.request('/api/project-composition/meetings?pid=ab2e')
const data = response.ok ? await response.json() : null
```

`POST /meetings` ➡ Create a new meeting using data in the request body.
- body: { projectId: string, topic: string, start_date: string, end_date: string, description?: string }
- response data: { id: string, topic: string, start_date: string, end_date: string, description: string, feedbackRecords: { [title]: { content: string, username: string }[], ... } }
```js
const response = await Provider.request('/api/project-composition/meetings', {
  method: 'POST',
  body: JSON.stringify({
    projectId: 'ab2e',
    topic: 'Bit-Retro API',
    start_date: '2021-01-01T00:00',
    end_date: '2021-01-01T01:00',
    description: 'A meeting for Bit-Retro API'
  })
})
const data = response.ok ? await response.json() : null
```

`PATCH /meetings` ➡ Update the meeting using data in the request body.
- parameters: meeting id of the meeting as `mid`
- body: { topic?: string, start_date?: string, end_date?: string, description?: string }
- response data: { id: string, topic: string, start_date: string, end_date: string, description: string, feedbackRecords: { [title]: { content: string, username: string }[], ... } }
```js
const response = await Provider.request('/api/project-composition/meetings?mid=ab2e', {
  method: 'PATCH',
  body: JSON.stringify({
    topic: 'Bit-Retro API',
    start_date: '2021-01-01T00:00',
    end_date: '2021-01-01T01:00',
    description: 'A meeting for Bit-Retro API'
  })
})
const data = response.ok ? await response.json() : null
```

`DELETE /meetings` ➡ Delete the meeting using meeting ID.
- parameters: meeting id of the meeting as `mid`
- response data: { id: string, topic: string, start_date: string, end_date: string, description: string, feedbackRecords: { [title]: { content: string, username: string }[], ... } }
```js
const response = await Provider.request('/api/project-composition/meetings?mid=ab2e', {
  method: 'DELETE'
})
const data = response.ok ? await response.json() : null
```

`POST /meetings/feedback` ➡ Create a new feedback using data in the request body.
- body: { userId: stringb, meetingId: string, group: string, text: string }
- response data: { id: string, start_date: string, end_date: string, description: string, feedbackRecords: { [title]: { content: string, username: string }[], ... } }
```js
const response = await Provider.request('/api/project-composition/meetings/feedback', {
  method: 'POST',
  body: JSON.stringify({
    userId: 'ab2e',
    meetingId: 'ab2e',
    group: 'Start',
    text: 'A feedback for Bit-Retro API'
  })
})
const data = response.ok ? await response.json() : null
```

`POST /meetings/feedbacks/vote` ➡ Vote for the feedback using data in the request body.
- body: { userId: string, feedbackId: string }
- response data: { id: string, userId: string, feedbackId: string }
```js
const response = await Provider.request('/api/project-composition/meetings/feedbacks/vote', {
  method: 'POST',
  body: JSON.stringify({
    userId: 'ab2e',
    feedbackId: 'ab2e'
  })
})
const data = response.ok ? await response.json() : null
```

`DELETE /meetings/feedbacks/vote` ➡ Cancel the vote for the feedback using data in the request body.
- body: { userId: string, feedbackId: string }
- response data: { id: string, userId: string, feedbackId: string }
```js
const response = await Provider.request('/api/project-composition/meetings/feedbacks/vote', {
  method: 'DELETE',
  body: JSON.stringify({
    userId: 'ab2e',
    feedbackId: 'ab2e'
  })
})
const data = response.ok ? await response.json() : null
```